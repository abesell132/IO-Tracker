{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","feetTraveled","milesTraveled","mouseClicks","itemsCopied","itemsCut","itemsPasted","screenPPI","axios","get","then","response","console","log","catch","error","_this2","timer","setInterval","getMovies","_this3","setState","data","event","_this4","target","value","post","body","react_default","a","createElement","className","type","defaultValue","onChange","handleChange","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb076514.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport axios from \"axios\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      feetTraveled: 0,\n      milesTraveled: 0,\n      mouseClicks: 0,\n      itemsCopied: 0,\n      itemsCut: 0,\n      itemsPasted: 0,\n      screenPPI: 1692\n    };\n  }\n  componentWillMount() {\n    axios\n      .get(\"http://localhost:31415/loaded\")\n      .then(function(response) {\n        console.log(response);\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n  componentDidMount() {\n    this.timer = setInterval(() => this.getMovies(), 2000);\n  }\n  async getMovies() {\n    axios\n      .get(\"http://localhost:31415\")\n      .then(response => {\n        this.setState({\n          feetTraveled: response.data.feetTraveled,\n          milesTraveled: response.data.milesTraveled,\n          mouseClicks: response.data.mouseClicks,\n          itemsCopied: response.data.itemsCopied,\n          itemsCut: response.data.itemsCut,\n          itemsPasted: response.data.itemsPasted\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  handleChange(event) {\n    this.setState({ screenPPI: event.target.value }, () => {\n      axios\n        .post(\"http://localhost:31415/ppi\", {\n          body: {\n            screenPPI: this.state.screenPPI\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"section-container\">\n            <div className=\"section-container-content\">\n              <p className=\"number\">{this.state.milesTraveled}</p>\n              <p>Miles Traveled</p>\n            </div>\n          </div>\n          <div className=\"section-container\">\n            <div className=\"section-container-content\">\n              <p className=\"number\">{this.state.feetTraveled}'</p>\n              <p>Feet Traveled</p>\n            </div>\n          </div>\n          <div className=\"section-container\">\n            <div className=\"section-container-content\">\n              <p className=\"number\">{this.state.mouseClicks}</p>\n              <p>Mouse Clicks</p>\n            </div>\n          </div>\n          <hr />\n          <div className=\"section-container\">\n            <div className=\"section-container-content\">\n              <p className=\"number\">{this.state.itemsCopied}</p>\n              <p>Items Copied</p>\n            </div>\n          </div>\n          <div className=\"section-container\">\n            <div className=\"section-container-content\">\n              <p className=\"number\">{this.state.itemsCut}</p>\n              <p>Items Cut</p>\n            </div>\n          </div>\n          <div className=\"section-container\">\n            <div className=\"section-container-content\">\n              <p className=\"number\">{this.state.itemsPasted}</p>\n              <p>Items Pasted</p>\n            </div>\n          </div>\n          <div className=\"PPI-form\">\n            <div className=\"form-container\">\n              <span>Enter Your Screen's PPI:</span>\n              <form>\n                <input\n                  type=\"number\"\n                  defaultValue=\"141\"\n                  onChange={this.handleChange.bind(this)}\n                />\n              </form>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}